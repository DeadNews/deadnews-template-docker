name: Docker

on:
  workflow_call:
    inputs:
      build-platforms:
        default: linux/amd64,linux/arm64
        description: List of target platforms for build
        type: string

permissions:
  contents: read

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Push image
    # Map a step output to a job output
    outputs:
      image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
    permissions:
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install the cosign tool except on PR.
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@9614fae9e5c5eddabb09f90a270fcb487c9f7149 # v3.3.0

      # Add support for more platforms with QEMU.
      - name: Setup QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      # Using it to be able to build multi-platform images, export cache, etc.
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR.
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@31cebacef4805868f9ce9a0cb03ee36c32df2ac4 # v5.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr

      # Build and push Docker image with Buildx (don't push on PR).
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ inputs.build-platforms }}

      # Sign the resulting Docker image digest except on PRs.
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  scan:
    name: Scan image
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Analyze vulnerabilities.
      - name: Run Trivy vulnerability scanner
        if: startsWith(github.ref, 'refs/tags/')
        uses: aquasecurity/trivy-action@91713af97dc80187565512baba96e4364e983601 # 0.16.0
        with:
          image-ref: ${{needs.build.outputs.image-ref}}
          format: "sarif"
          output: "trivy-results.sarif"

      # Upload report to GitHub code scanning.
      - name: Upload Trivy scan results to GitHub Security tab
        if: startsWith(github.ref, 'refs/tags/')
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
