# This GitHub Actions workflow builds and pushes a Docker image, and then scans it for vulnerabilities using Trivy.
# It is triggered by a workflow call and requires inputs for the Dockerfile path, build platforms, and flavor.
# The workflow uses various actions such as checkout, cosign-installer, setup-qemu-action, setup-buildx-action,
# login-action, metadata-action, build-push-action, trivy-action, and upload-sarif to perform the necessary steps.

name: Docker

on:
  workflow_call:
    inputs:
      dockerfile:
        default: Dockerfile
        description: Path to the Dockerfile.
        type: string
      build-args:
        default: ""
        description: List of build-time variables.
        type: string
      build-platforms:
        default: linux/amd64
        description: List of target platforms for build.
        type: string
      flavor:
        default: ""
        description: |
          Defines a global behavior for tags.
          See `docker/metadata-action` for more details.
        type: string

permissions:
  contents: read

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Push image
    # Map a step output to a job output
    outputs:
      image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
    permissions:
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install the cosign tool except on PR.
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

      # Add support for more platforms with QEMU.
      - name: Setup QEMU
        if: inputs.build-platforms != 'linux/amd64'
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      # Using it to be able to build multi-platform images, export cache, etc.
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      # Login against a Docker registry except on PR.
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: ${{ inputs.flavor }}
          tags: |
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr

      # Build and push Docker image with Buildx (don't push on PR).
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ inputs.build-platforms }}
          build-args: ${{ inputs.build-args }}

      # Sign the resulting Docker image digest except on PRs.
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  scan:
    name: Scan image
    if: github.ref_type == 'tag'
    needs: [build]
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Analyze vulnerabilities.
      - name: Run Trivy vulnerability scanner
        if: github.ref_type == 'tag'
        uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 # 0.29.0
        with:
          image-ref: ${{needs.build.outputs.image-ref}}
          format: "sarif"
          output: "trivy-results.sarif"

      # Upload report to GitHub code scanning.
      - name: Upload Trivy scan results to GitHub Security tab
        if: github.ref_type == 'tag'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
